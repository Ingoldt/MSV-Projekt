
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
import tkinter as tk
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage, StringVar, ttk
from audio.recorder import AudioRecorder
from PIL import ImageTk, Image


OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"assets/frame0")


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)

def toggle_recording(button: tk.Button):
    if recorder.is_recording:
        button.config(image=record_button_img)
        recorder.stop_recording()
    else:
        button.config(image=pause_button_img)
        recorder.start_recording()



window = Tk()

recorder = AudioRecorder(0)

window.geometry("1280x720")
window.configure(bg = "#1897DF")

canvas = Canvas(
    bg="#1897DF",
    height=720,
    width=1280,
    bd=0,
    highlightthickness=0,
    relief="ridge"
)

canvas.place(x = 0, y = 0)

pause_button_img = PhotoImage(file=relative_to_assets("pause_button.png"))
play_button_img = PhotoImage(file=relative_to_assets("play_button.png"))



record_button_img = PhotoImage(
    file=relative_to_assets("button_2.png"))
record_button = Button(
    image=record_button_img,
    cursor="hand2",
    borderwidth=0,
    highlightthickness=0,
    command=lambda: toggle_recording(record_button),
    relief="flat"
)
record_button.place(
    x=388.0,
    y=113.0,
    width=140.0,
    height=52.0
)

file_select_img = PhotoImage(
    file=relative_to_assets("button_3.png"))
file_select_button = Button(
    image=file_select_img,
    cursor="hand2",
    borderwidth=0,
    highlightthickness=0,
    command=lambda: print("button_3 clicked"),
    relief="flat"
)
file_select_button.place(
    x=570.0,
    y=113.0,
    width=140.0,
    height=52.0
)

settings_img = PhotoImage(
    file=relative_to_assets("button_4.png"))
settings_button = Button(
    image=settings_img,
    cursor='hand2',
    borderwidth=0,
    highlightthickness=0,
    command=lambda: print("button_4 clicked"),
    relief="flat"
)
settings_button.place(
    x=0.0,
    y=0.0,
    width=198.0,
    height=38.0
)

# NEW
save_file_img = PhotoImage(
    file=relative_to_assets("button_5.png"))
save_button = Button(
    image=save_file_img,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: print("button_5 clicked"),
    relief="flat"
)
save_button.place(
    x=934.0,
    y=113.0,
    width=140.0,
    height=52.0
)

settings_img_hover = PhotoImage(
    file=relative_to_assets("button_hover_1.png"))

def settings_hover(e):
    settings_button.config(
        image=settings_img_hover
    )
def settings_leave(e):
    settings_button.config(
        image=settings_img
    )

settings_button.bind('<Enter>', settings_hover)
settings_button.bind('<Leave>', settings_leave)

file_select_img_hover = PhotoImage(
    file=relative_to_assets("button_hover_2.png"))

def file_select_hover(e):
    file_select_button.config(
        image=file_select_img_hover
    )
def file_select_leave(e):
    file_select_button.config(
        image=file_select_img
    )

file_select_button.bind('<Enter>', file_select_hover)
file_select_button.bind('<Leave>', file_select_leave)

save_file_img_hover = PhotoImage(
    file=relative_to_assets("button_hover_3.png"))

def save_file_hover(e):
    save_button.config(
        image=save_file_img_hover
    )
def save_file_leave(e):
    save_button.config(
        image=save_file_img
    )

save_button.bind('<Enter>', save_file_hover)
save_button.bind('<Leave>', save_file_leave)

# Drop Down Menu

variable = tk.StringVar()
variable.set("Choose Effect")
list_effects = ['Echo', 'Reverb', 'Distortion', 'Tremolo', 'WahWah']

# Use 'window' as the parent for OptionMenu, not 'canvas'
effects_dropdown = tk.OptionMenu(
    window,
    variable,
    *list_effects,
    command=lambda _: print(variable.get())
)

dropdown_img = PhotoImage(
    file=relative_to_assets("dropdown.png"))
effects_dropdown.config(
    bg='white',
    fg="black",
    cursor='hand2',
    activebackground='#FF5C00',
    activeforeground='black',
    font=("Verdana", 16, 'bold'),
    borderwidth=0,
    border=0,
    highlightthickness=0,
    highlightcolor="#c1c6ee",
    pady=20,
    indicatoron=0
)

effects_dropdown['menu'].config(
    bg='white',
    fg="black",
    cursor='hand2',
    activebackground='#FF5C00',
    activeforeground='black',
    font=("Verdana", 14, 'bold'),
    borderwidth=0
)

# Place OptionMenu on the canvas at a specific location
effects_dropdown.place(
    x=0.0,
    y=113.0,
    width=280.0,
    height=52.0)

dropdown_label = tk.Label(
    effects_dropdown,
    width=25,
    height=25,
    borderwidth=0,
    border=0,
    highlightthickness=0,
    image=dropdown_img
)

dropdown_label.place(
    relx=0.87,
    rely=0.3
)

def dropdown_hover(event):
    dropdown_label.config(
        bg='#FF5C00'
    )
def dropdown_leave(event):
    dropdown_label.config(
        bg='white'
    )
effects_dropdown.bind('<Enter>', dropdown_hover)
effects_dropdown.bind('<Leave>', dropdown_leave)

def on_dropdown_click(event):
    x = effects_dropdown.winfo_rootx()
    y = effects_dropdown.winfo_rooty() + effects_dropdown.winfo_height()
    effects_dropdown['menu'].post(x, y)


dropdown_label.bind('<Button-1>', on_dropdown_click)

window.resizable(False, False)
window.mainloop()
